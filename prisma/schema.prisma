// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum userRole {
  CUSTOMER
  EMPLOYEE
  MANAGER
}

enum statusOrder {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum drinkType {
  HOT
  COLD
  MIXED
}

enum cupSize {
  SMALL
  MEDIUM
  LARGE
}

enum sweetness {
  NO_SUGAR
  LESS_SUGAR
  NORMAL_SUGAR
  MORE_SUGAR
}

model User {
  id  String @id @default(cuid())
  name String?
  email     String   @unique
  password  String
  role      userRole @default(CUSTOMER)

  supply StockItem[]
  closeOrders Drink[]

  // orders   Order[]
  // restocks Restock[]
}

model Drink {
  id         Int        @id @default(autoincrement())
  name        String
  price       Float
  mainIngredient String
  img String?

  ingredients StockItem[]
  closeBy User[]

  // orders Order[]
  // ingredients Ingredient[]
}

model StockItem {
  id          Int        @id @default(autoincrement())
  name     String
  currentQuantity    Int
  stockUnit     String
  category String
  lowThreshold Int?
  nearlyEmpty Int?
  lastUpdated DateTime @default(now())

  useIn Drink[]
  supplyBy User[]

  // useIn Ingredient[]
  // restock Restock[]
}

//relationships
// model Order {
//   addons        Boolean
//   drinkType     drinkType @default(COLD)
//   sweetLevel sweetness @default(NORMAL_SUGAR)
//   cupSize       cupSize @default(MEDIUM)
//   orderStatus statusOrder @default(PENDING)
//   orderDate DateTime @default(now())

//   employee User @relation(fields: [employeeId], references: [id])
//   employeeId Int
//   drink Drink @relation(fields: [drinkId], references: [id])
//   drinkId Int

//   @@id([employeeId, drinkId])
// }

// model Ingredient {
//   quantity Float

//   stockItem StockItem @relation(fields: [stockItemId], references: [id])
//   stockItemId Int
//   drink Drink @relation(fields: [drinkId], references: [id])
//   drinkId Int

//   @@id([stockItemId, drinkId])
// }

// model Restock {
//   restockDate DateTime @default(now())
//   oldQuantity Int
//   newQuantity Int

//   stockItem StockItem @relation(fields: [stockItemId], references: [id])
//   stockItemId Int
//   employee User @relation(fields: [employeeId], references: [id])
//   employeeId Int

//   @@id([stockItemId, employeeId])
// }