// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum userRole {
  USER
  EMPLOYEE
  MANAGER
}

enum statusOrder {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum drinkType {
  HOT
  COLD
  MIXED
}

enum cupSize {
  SMALL
  MEDIUM
  LARGE
}

enum sweetness {
  NO_SUGAR
  LESS_SUGAR
  NORMAL_SUGAR
  MORE_SUGAR
}

// Models
model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  role      userRole  @default(USER)
  createdAt DateTime @default(now())
  
  employeeOrders Order[]

  itemUpdated UpdateStock[]
}

model StockItem {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  Int
  recQuantity Int
  unit      String
  imgUrl   String?
  category  String

  updatedBy UpdateStock[]
  ingredient Ingredient[]
}

model Drink {
  id        Int      @id @default(autoincrement())
  name      String
  price     Float
  imgUrl   String

  OrderItem OrderItem[]
  Ingredient Ingredient[]
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  employee User @relation(fields: [employeeId], references: [id])
  employeeId Int

  orderItems OrderItem[]
}

//relationships
model OrderItem {
  @@id([drinkId, orderId])

  drink Drink @relation(fields: [drinkId], references: [id])
  drinkId Int
  order Order @relation(fields: [orderId], references: [id])
  orderId Int
  drinkType drinkType @default(COLD)
  quantity Int
  totalPrice Float
  addon Boolean @default(false)
  cupSize cupSize @default(MEDIUM)
  sweetness sweetness @default(NORMAL_SUGAR)
  statusOrder statusOrder @default(PENDING)
}

model UpdateStock {
  @@id([stockItemId, employeeId])

  stockItem StockItem @relation(fields: [stockItemId], references: [id])
  stockItemId Int
  employee User @relation(fields: [employeeId], references: [id])
  employeeId Int
  updateAt DateTime @default(now())
}

model Ingredient {
  @@id([drinkId, stockItemId])
  drink Drink @relation(fields: [drinkId], references: [id])
  drinkId Int
  stockItem StockItem @relation(fields: [stockItemId], references: [id])
  stockItemId Int
  amount Int
}