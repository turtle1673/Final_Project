// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?
  email     String   @unique
  password  String
  role      UserRole  @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stocks    UserStock[]
  orders    Order[]
}

enum StockStatus {
  ACTIVE
  INACTIVE
}
enum StockCategory {
  NULL
  DRINK
  TOPPING
  STUFF
}
model Stock {
  id        Int      @id @default(autoincrement())
  name      String
  quantity  Int
  category  String
  status    StockStatus @default(ACTIVE)   
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     UserStock[]
  orders    OrderStock[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}
enum CupSize {
  SMALL
  MEDIUM
  LARGE
}
enum DrinkSweetness {
  SWEETEST
  NORMAL
  LESS
  NO_SUGAR
}
model Order {
  id        Int      @id @default(autoincrement())
  drinkname String
  type      String
  topping   String
  sweetness DrinkSweetness @default(NORMAL)
  cupsize  CupSize @default(MEDIUM)
  price     Float
  quantity  Int
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  stocks    OrderStock[]
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
}

model UserStock {
  userId    Int
  stockId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id])
  stock     Stock    @relation(fields: [stockId], references: [id])
  @@id([userId, stockId])
}

model OrderStock {
  orderId   Int
  stockId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order     Order    @relation(fields: [orderId], references: [id])
  stock     Stock    @relation(fields: [stockId], references: [id])
  @@id([orderId, stockId])
}